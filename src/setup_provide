#!/usr/bin/env python3

import argparse
import os
import re
import shutil
import subprocess
import sys
from datetime import datetime, timedelta
from itertools import chain
from pathlib import Path
from tempfile import NamedTemporaryFile
from time import sleep

try:
    from gradescope_web import GradescopeSession
except ImportError:
    source = "git+https://github.com/kedestin/GradescopeWeb.git"
    print(
        "This script needs a package to talk to gradescope. Please install with:\n"
    )
    print("/usr/bin/env python3 -m pip install --user " + source)
    exit(1)

from termcolor import colored

COURSE = 15
BASEDIR = Path("/comp/" + str(COURSE) + "/grading")
ASSIGN_CONF = BASEDIR / "assignments.conf"
GROUP = "grade15"
MAXLATEDAYS = 2
CHECKFILES = "screening/bin/check_files"


def main(
    assign, duedate, duetime, gs, minfiles, files, reqFiles, submissions, status,
    prepare
):
    # Converts 'gs' arg passed on commandline to a boolean.
    gs = str2bool(gs)

    userConfig = {
        k: v
        for k, v in locals().items() if v is not None and k != "reqFiles" and k != "gs"
    }
    os.umask(0o002)

    TESTSET = BASEDIR / ("screening/testsets/" + assign)
    EXCEPTIONS = BASEDIR / (assign + "/exceptions.conf")
    prevConfig, region = getLastWhere(
        ASSIGN_CONF,
        re.compile(r'\bassign=%s\b' % assign).search
    )

    # Makes "files" and "minfiles" mutually exclusive. Prefers user args over
    # any args of that type in an existing config.
    if any(key in userConfig for key in ["files", "minfiles"]):
        prevConfig.pop("minfiles" if "files" in userConfig else "files", None)

    newConfig = {**prevConfig, **userConfig}

    showHeader("Configuring assignment.conf")
    addToConfFile(newConfig, ASSIGN_CONF, *region)
    launch_editor(ASSIGN_CONF, region[0])

    # Need to update to reflect any changes
    newConfig, _ = getLastWhere(
        ASSIGN_CONF,
        re.compile(r'\bassign=%s\b' % assign).search
    )

    if newConfig.get("prepare", None) == CHECKFILES:
        if str2bool(gs):
            showHeader("Setting up gradescope assignment")
            courseId, assignId = getGradescopeIDs(assign, duedate, duetime)

            showHeader("Configuring testset")
            create_testset(assign, reqFiles, courseId, assignId)
            launch_editor(TESTSET)
        else:
            print("Did not create a Gradescope assingment")
            showHeader("Configuring testset")
            create_testset(assign, reqFiles, "", "", False)
            launch_editor(TESTSET)


    showHeader("Running prozac (creates folder for submissions)")
    prozac(COURSE, assign)

    showHeader("Setting up legacy testing folders (optional)")
    setupLegacyFolders(assign)

    add_exception(EXCEPTIONS)


def str2bool(v):
    if isinstance(v, bool):
       return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


def showHeader(string):
    """
        Prints out a formatted section header.
        (Formatting is omitted if stdout isn't a tty)
    """
    string = "\n* " + string
    if sys.stdout.isatty():
        string = colored(string.replace(" ", "_"), attrs=['bold', 'underline'])
    print(string, end="\n\n")


def add_exception(EXCEPTIONS):
    """
        adds exception for mkorma01 account to allow for testing
    """
    TESTACCOUNT = "mkorma01"
    foundConfig, region = getLastWhere(
        EXCEPTIONS,
        re.compile(r'\blogin=%s\b' % TESTACCOUNT).search
    )
    newConfig = {
        **foundConfig,
        **{
            "login": TESTACCOUNT,
            "status": "on",
            "duedate": "12/25",
            "duetime": "11:59pm",
            "submissions": "10000"
        }
    }

    addToConfFile(newConfig, EXCEPTIONS, *region)


def create_testset(assign, files, courseId, assignId, gradescope=True):
    """
        Copies template testset into testset directory.
        Replaces some placeholder strings in template with appropriate
        values
        If an existing testset is present, changes are merged into existing
    """
    # TODO make this relative to this script
    templateTestset = str(Path(__file__).parent / "bin/setup_testset")
    testset = BASEDIR / ("screening/testsets/" + assign)
    # make a tempfile if a testset already exists
    tempFile = NamedTemporaryFile() if testset.exists() else None
    newTestset = tempFile.name if tempFile else str(testset)

    shutil.copy2(templateTestset, newTestset)
    shutil.chown(newTestset, group=GROUP)
    os.chmod(newTestset, 0o770)
    # edit testset
    if gradescope:
        replacements = [
            arg for key, val in {
                "ASSIGN_NAME": assign,
                "REQUIRED_FILES": ' '.join(files),
                "COURSE_ID": courseId,
                "ASSIGNMENT_ID": assignId
            }.items() for arg in ['-e', 's/{0}/{1}/g'.format(key, val)]
        ]
        subprocess.run(["sed", "-i", *replacements, newTestset])
    else:
        replacements = [
            arg for key, val in {
                "ASSIGN_NAME": assign,
                "REQUIRED_FILES": ' '.join(files),
                "\s*(WARN|FAIL)\s+submit_to_gradescope.py": "#FAIL submit_to_gradescope.py"
            }.items() for arg in ['-e', 's/{0}/{1}/g'.format(key, val)]
        ]
        subprocess.run(["sed", "-i", "-E", *replacements, newTestset])
    
    # Determines if the assignment is a lab, if so, uses 'sed' to comment out
    # token checks
    isLab(assign, newTestset)

    if tempFile:
        subprocess.run(
            [
                "git", "merge-file",
                str(testset), templateTestset, newTestset, "--theirs"
            ]
        )
        tempFile.close()

def isLab(assign, testset):
    lab = (assign[0:3])
 
    if lab == "lab":
        subprocess.run(["sed", "-i", "-E","s/(WARN|FAIL)\s*token_check\s*/# FAIL token_check/g", testset])
        subprocess.run(["sed", "-i", "-E","s/(WARN|FAIL)\s*.*Token\s*History:\s*/# WARN echo Token History:/g", testset])
        subprocess.run(["sed", "-i", "-E","s/(WARN|FAIL)\s*.*tms\s*show\s*\$STUDENT/# WARN tms show $STUDENT/g", testset])
        return True
    return False

def getEntireConfig(fileIterator):
    """
        Grabs all lines from iterator until first non continued line
        returns (endingLineno, lines)
    """
    lineno, line = next(fileIterator)
    if not line.endswith("\\\n"):
        return lineno, line.rstrip()
    end, suffix = getEntireConfig(fileIterator)
    return end, line + suffix


def getLastWhere(conffile, predicate):
    """
        Returns last config in .conf file accepted by the predicate function

        Ex. in assignments.conf if predicate accepts config where assign=hw4:
            assign=hw4 submissions=5 duedate=3/11
            assign=hw4 submissions=9999 duedate=12/25 <--- returned

        Returns (assignDict, (    start,       end))   if found
                (        {}, (eofLineno, eofLineno))   if not found
    """
    foundConfig = None
    with Path(conffile).open() as f:
        fileIter = enumerate(f, 1)
        for lineNum, line in fileIter:
            if line.isspace():
                continue

            endNum, conf = getEntireConfig(chain([(lineNum, line)], fileIter))

            if predicate(conf):
                foundConfig = (config2dict(conf), (lineNum, endNum))

    eofNum = max(lineNum, endNum) + 1
    return foundConfig if foundConfig else ({}, (eofNum, eofNum))


def config2dict(config):
    config = config.replace("\\\n", " ")
    return dict(field.split("=", 1) for field in config.split())


def dict2config(configDict):
    updated_config = ""
    for field, value in sorted(configDict.items(), key=lambda x: x[0]):
        if field == "prepare":
            updated_config += "\\\n\t"
        updated_config += field + "=" + value + " "
    return updated_config


def launch_editor(path, line_num=0):
    """
        launches a text editor, returns after file is closed.
    """
    print("Opening '{}'\n\nEdit file if needed, close to continue".format(path))

    cmd = ["code", "--wait", "--goto", '{}:{}'.format(path, line_num)]

    if not shutil.which("code"):
        sleep(3)
        cmd = ["vim", "+" + str(line_num), str(path)]

    subprocess.run(cmd)


def addToConfFile(configDict, conffile, start, end):
    """
        adds config to .conf file
    """
    config = dict2config(configDict)

    # Assignment exists, so we are overwritting with our new config
    with Path(conffile).open() as f:
        data = f.readlines()
    with Path(conffile).open("w") as f:
        f.writelines(data[0:start - 1])
        # Add newline if file doesn't end with a newline
        if start > len(data) and not data[-1].endswith("\n"):
            f.write("\n")
        f.write(config + "\n")
        f.writelines(data[end:])


def setupLegacyFolders(assign):
    """
        Sets up a list of folders that are used by 
        /comp/15/grading/gtools/grade

        Not currently in use, but set up as a fallback
    """
    testdir = BASEDIR / ('tests/' + assign)
    try:
        for x in ["bin", "copy", "cpp", "input", "output", "makefile"]:
            (testdir / x).mkdir(parents=True, exist_ok=True)
            shutil.chown(str(testdir / x), group=GROUP)
        shutil.chown(str(testdir), group=GROUP)
    except PermissionError as e:
        print("chgrp failed: " + str(e))


def prozac(course, assign):
    """
        Runs prozac, which sets up /comp/15/grading/HWID and assures
        correct permissions
    """
    result = subprocess.run(
        ["prozac", "comp" + str(course), assign],
        stdout=subprocess.PIPE,
        universal_newlines=True
    )

    assignBlock = re.search("[+]{20}.+[+]{20}", result.stdout, re.DOTALL)

    def isOkay(output):
        return (
            # Exited normally
            result.returncode == 0 and
            # Assignment could be parsed by prozac
            assignBlock and
            # No errors occurred
            not re.search(r"total of \d+ errors found!  FIX THESE!", output)
        )

    print(assignBlock.group() if isOkay(result.stdout) else result.stdout)


def verifyDateTime(dtFormat):
    def verifier(value):
        try:
            datetime.strptime(value, dtFormat)
            return value
        except ValueError:
            pass
        raise argparse.ArgumentTypeError(
            value + " doesn't match format " + dtFormat
        )

    return verifier




def getGradescopeIDs(assign, duedate, duetime):
    g = GradescopeSession()
    dueDateTime = datetime.strptime(duedate + " " + duetime,
                                    '%m/%d %H:%M').replace(
                                        year=datetime.now().year
                                    )

    hideUntil = dueDateTime + timedelta(days=MAXLATEDAYS)

    # TODO: Refactor out name and semester (no hard coding)
    course = next(
        (
            c for c in g.classes if c.role == "instructor" and
            c.name == "CS 15" and c.semester == "Fall 2021"
        ), None
    )

    if not course:
        raise ValueError("You don't have access to course on Gradescope")

    assignment = next((a for a in course.assignments if a.name == assign), None)

    if not assignment:
        assignment = course.create_assignment(
            title=assign,
            totalPoints=0,
            releaseDate=hideUntil,
            dueDate=hideUntil,
            manualGrading=True,
            memoryLimit=6144,
            autograderTimeout=600
        )

    return course.id, assignment.id


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Helps you set up an assignment'
    )
    requiredArgs = parser.add_argument_group('required arguments')
    requiredArgs.add_argument(
        '-a', 
        required=True,
        dest='assign',
        help='Assignment name e.g. hw1'
    )
    requiredArgs.add_argument(
        '-d',
        required=True,
        dest='duedate',
        help='Date in form of MM/DD e.g. 12/25',
        type=verifyDateTime("%m/%d")
    )
    requiredArgs.add_argument(
        '-t',
        required=True,
        dest='duetime',
        help='Time in form of HH:MM e.g. 15:00',
        type=verifyDateTime("%H:%M")
    )
    requiredArgs.add_argument(
        '-gs',
        required=True,
        dest='gs',
        help='Whether or not to create a corresponding Gradescope assigment'
    )
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('--minfiles', help="Minimum number of files required")
    group.add_argument(
        '--numfiles', dest='files', help="Number of files required"
    )
    parser.add_argument(
        '--status',
        help="Status of assignment. Default is 'off'",
        default='off',
        choices=[
            "on",
            "off",
        ]
    )
    parser.add_argument(
        '--prepare',
        default="screening/bin/check_files",
        help=
        "Script run in submission dir by provide. Submission fails if returns non-zero",
    )
    parser.add_argument('reqFiles', metavar='files', nargs='*',\
                        help='Names of required files.')
    parser.add_argument('-ns', dest='submissions', default='5',\
                        help='Number of submissions allowed per student. Default: 5.')

    main(**vars(parser.parse_args()))
