# ASSIGN_NAME testset
#
# Syntax: 
#        * comment lines start with #
#        * all action lines are of the format
#                {WARN|FAIL}   cmd   args
#
#                * cmd can be any unix command OR a built-in
#                * the built-ins are
#                     require      [@fail_script] filename ...
#                                  asserts that all listed files are present
#                                  runs fail_script if not
#                     not_allowed  shell-wildcard-pattern
#                                  checks that files matching
#                     allow        filename ...
#                     filetype     shell-wildcard-pattern RE
#
# (complete documentation found in $GRADINGROOT/screening/bin/check_files)



# Use time_check if the assignment is a lab, or you otherwise want to check 
# for lateness, but not use up student tokens.
# FAIL time_check 

FAIL	require	REQUIRED_FILES


# Uncomment the 'WARN echo' lines below and 'FAIL compile_student' if you want 
# to ensure that student submissions compile before allowing them to provide.

# WARN echo ======= Attempting to Compile Your Submission =======
# WARN echo Please be patient, this might take some time...
# Usage: compile_student [--assert-exec=EXEC_NAME] compilationCMD ...
# FAIL compile_student


# Does token check and shows token history to students
FAIL	token_check
WARN	echo Token History:
WARN    tms show $STUDENT


# WARN echo ======= Submitting to Gradescope =======
# Fail if submission was not submitted to gradescope.
FAIL submit_to_gradescope.py -c COURSE_ID \
                             -a ASSIGNMENT_ID \
                             --logfile .response \
                             --token $GRADING_ROOT/screening/bin/.gradescope_token



# Use time_spent if you want students to log the number of hours spent on an
# assignment.
FAIL time_spent $STUDENT $HW
